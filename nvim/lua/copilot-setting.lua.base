-- PLUGSETTING: zbirenbaum/copilot.lua
require('copilot').setup({
  panel = {
    enabled = true,
    auto_refresh = false,
    keymap = {
      jump_prev = "[[",
      jump_next = "]]",
      accept = "<CR>",
      refresh = "gr",
      open = "<M-CR>"
    },
    layout = {
      position = "bottom", -- | top | left | right
      ratio = 0.4
    },
  },
  suggestion = {
    enabled = true,
    auto_trigger = true, -- default: false
    debounce = 75,
    keymap = {
      accept = "<C-k><C-k>", -- default : <M-l>
      accept_word = false,
      accept_line = false,
      next = "<Nop>",
      prev = "<C-o>",
      dismiss = "<C-]>",
    },
  },
  filetypes = {
    yaml = true,
    markdown = true,
    help = true,
    gitcommit = true,
    gitrebase = true,
    lua = true,
    vim = true,
    javascript = true,
    typescript = true,
    vue = true,
    html = true,
    go = true,
    css = true,
    astro = true,
    ["*"] = false,
  },
  copilot_node_command = 'node', -- Node.js version must be > 18.x
  copilot_model = 'gpt-4o',
  server_opts_overrides = {},
})

-- PLUGSETTING: CopilotC-Nvim/CopilotChat.nvim
require("CopilotChat").setup {
  model = 'gpt-4o',
  sticky = {
    '説明は、常に日本語でお願いします。',
  },

  debug = true, -- Enable debugging
  -- See Configuration section for rest

  question_header = '## 🙋🙋🙋 User 🙋🙋🙋', -- Header to use for user questions
  answer_header = '## 🤖🤖🤖 Copilot 🤖🤖🤖', -- Header to use for AI answers
  error_header = '## ⚠️⚠️⚠️ Error ⚠️⚠️⚠️', -- Header to use for errors

  prompts = {
    Explain = {
      prompt = '/COPILOT_EXPLAIN 選択部分のコードについて説明してください。',
    },
    TranslateEnToJa = {
      prompt = '/COPILOT_EXPLAIN 選択部分の英語を日本語に訳してください。',
    },
    -- Review = {
    --   prompt = '/COPILOT_REVIEW Review the selected code.',
    --   callback = function(response, source)
    --     -- see config.lua for implementation
    --   end,
    -- },
    Fix = {
      prompt = '/COPILOT_GENERATE このコードには問題があります。バグを修正したコードに書き換えてください。',
    },
    Optimize = {
      prompt = '/COPILOT_GENERATE 選択部分のコードを最適化し、パフォーマンスと可読性を向上させてください。',
    },
    Docs = {
      prompt = '/COPILOT_GENERATE 選択部分のコードのドキュメントを書いてください。具体的には、「ドキュメントをコメントとして追加した、元のコードを含むコードブロック」で回答してください。また、使用するプログラミング言語に最も適したドキュメントスタイルを使用してください（例：JavaScriptのJSDoc、Pythonのdocstringsなど）',
    },
    Tests = {
      prompt = '/COPILOT_GENERATE 選択部分のコードの、単体テストを書いてください。',
    },
    -- FixDiagnostic = {
    --   prompt = 'Please assist with the following diagnostic issue in file:',
    --   selection = select.diagnostics,
    -- },
    -- Commit = {
    --   prompt = 'Write commit message for the change with commitizen convention. Make sure the title has maximum 50 characters and message is wrapped at 72 characters. Wrap the whole message in code block with language gitcommit.',
    --   selection = select.gitdiff,
    -- },
    CommitStaged = {
      prompt = [[Write commit message for the change with commitizen convention.
Make sure the title has maximum **50 characters** and message is wrapped at **72 characters**.
Wrap the whole message in code block with language gitcommit.

Also, please use the following word and emoji as prefix for the title:

feat ✨      feature
fix 🐛       bug fix
deps ➕      add dependencies
deps ➖      remove dependencies
breaking 💥  breaking changes
docs 📝      documentation
style 💄     formatting, missing semi colons, etc
refactor ♻️   refactoring
test ✅      when adding missing tests
chore ✏️      maintain

また、タイトルの prefix はそのままとして、タイトルとメッセージを日本語に翻訳したバージョンも出力してください。
]],
    },
  },

  window = {
    layout = 'vertical', -- 'vertical', 'horizontal', 'float', 'replace'
    width = 0.4
  },

  -- default mappings
  mappings = {
    complete = {
      detail = 'Use @<Tab> or /<Tab> for options.',
      insert ='<Tab>',
    },
    close = {
      normal = 'q',
      insert = '<Nop>'
    },
    reset = {
      normal ='<C-l>',
      insert = '<Nop>'
    },
    submit_prompt = {
      normal = '<CR>',
    },
    accept_diff = {
      normal = '<C-y>',
      insert = '<Nop>'
    },
    yank_diff = {
      normal = 'gy',
    },
    show_diff = {
      normal = 'gd'
    },
    show_system_prompt = {
      normal = 'gp'
    },
    show_user_selection = {
      normal = 'gs'
    },
  },
}

-- バッファの内容全体を使って Copilot とチャットする
function CopilotChatBuffer()
  local input = vim.fn.input("Quick Chat: ")
  if input ~= "" then
    require("CopilotChat").ask(input, { selection = require("CopilotChat.select").buffer })
  end
end

-- 英語翻訳用のカスタムコマンド
vim.api.nvim_create_user_command(
  'CopilotChatTranslateToEn', -- コマンド名
  function()
    -- インタラクティブ入力を開始
    vim.ui.input({ prompt = '翻訳する文字列を入力してください: ' }, function(input)
      -- 入力がキャンセルされた場合は処理を中断
      if input == nil or input == '' then
        print('キャンセルされました。')
        return
      end
      -- 実行するコマンドを組み立てる
      local command = string.format(
        ':CopilotChat 「%s」は英語で何になりますか？',
        input
      )
      -- コマンドを実行
      vim.cmd(command)
    end)
  end,
  {
    nargs = 0, -- 引数は不要（インタラクティブモードで入力を受け付けるため）
    desc = "インタラクティブモードで翻訳する文字列を入力するカスタムコマンド"
  }
)

-- normal
vim.api.nvim_set_keymap("n", "<leader>cco", "<cmd>CopilotChatOpen<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>o", "<cmd>CopilotChatToggle<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<M-o>", "<cmd>CopilotChatToggle<cr>", { noremap = true, silent = true })
-- vim.api.nvim_set_keymap("n", "<leader>cct", "<cmd>CopilotChatToggle<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>ccs", "<cmd>CopilotChatStop<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>ccr", "<cmd>CopilotChatReset<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>ccc", "<cmd>CopilotChatCommitStaged<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>cct", "<cmd>CopilotChatTranslateToEn<cr>", { noremap = true, silent = true })

-- visual
vim.api.nvim_set_keymap('v', '<leader>cce', ':CopilotChatExplain<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('v', '<leader>cct', ':CopilotChatTranslateEnToJa<CR>', { noremap = true, silent = true })
vim.api.nvim_set_keymap('v', '<leader>ccd', ':CopilotChatDocs<CR>', { noremap = true, silent = true })

-- Copilot Chat Quick: 現在のバッファを入力にして Copilot とチャットする
vim.api.nvim_set_keymap("n", "<leader>ccq", "<cmd>lua CopilotChatBuffer()<cr>", { noremap = true, silent = true })

