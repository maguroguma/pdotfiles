[[plugins]]
repo = 'tani/vim-jetpack'
opt = true

[[plugins]]
repo = 'junegunn/fzf'
on_cmd = ['Files', 'History:', 'HCommand']

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'junegunn/fzf'
on_cmd = ['Files', 'History:', 'HCommand']
hook_post_source = '''
if executable('rg')
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(
    \   <q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}),
    \   <bang>0)

" source
function! s:list_command_history() abort
  let l:res = system("cat $HOME/.zhistory | cut -b 16- | head -n 5000")
  return reverse(split(l:res, "\n"))
endfunction
" sink
function! s:insert_target(shell_command) abort
  call setline(line("."), a:shell_command)
endfunction
command! HCommand call fzf#run(fzf#wrap({
  \ 'source': s:list_command_history(),
  \ 'sink': funcref('s:insert_target'),
  \ 'options': '--ansi --prompt "replace current line> "',
\ }))

" popup window
let g:fzf_layout = { 'window': { 'width': 0.5, 'height': 0.4, 'yoffset': 0.5 } }

" Empty value to disable preview window altogether
let g:fzf_preview_window = []
'''

[[plugins]]
repo = 'rlane/pounce.nvim'
on_cmd = ['Pounce']
hook_post_source = '''
highlight PounceMatch      cterm=underline,bold ctermfg=49 ctermbg=236 gui=underline,bold guifg=#555555 guibg=#FFAF60
highlight PounceGap        cterm=underline,bold ctermfg=214 ctermbg=236 gui=underline,bold guifg=#555555 guibg=#E27878
highlight PounceAccept     cterm=underline,bold ctermfg=184 ctermbg=236 gui=underline,bold guifg=#FFAF60 guibg=#555555
highlight PounceAcceptBest cterm=underline,bold ctermfg=196 ctermbg=236 gui=underline,bold guifg=#EE2513 guibg=#555555

lua << EOF
require'pounce'.setup{
  accept_keys = "HJKLYUIOPNMQWERTASDFGZXCVB",
  accept_best_key = "<enter>",
  multi_window = true,
  debug = false,
}
EOF
'''

[[plugins]]
repo = 'max397574/better-escape.nvim'
on_event = 'InsertEnter'
hook_post_source = '''
lua << EOF
-- PLUGSETTING: max397574/better-escape.nvim
-- lua, default settings
require("better_escape").setup {
    mapping = {"jj", "jk", "kj"}, -- a table with mappings to use
    timeout = 200, -- the time in which the keys must be hit in ms. Use option timeoutlen by default
    clear_empty_lines = false, -- clear line after escaping if there is only whitespace
    keys = "<Esc>", -- keys used for escaping, if it is a function will use the result everytime
    -- example(recommended)
    -- keys = function()
    --   return vim.api.nvim_win_get_cursor(0)[2] > 1 and '<esc>l' or '<esc>'
    -- end,
}
EOF
'''
