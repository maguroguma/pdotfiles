# setup fzf
export FZF_HOME=$HOME/.fzf
if [[ ! "$PATH" == */.fzf/bin* ]]; then
  # PATHが空文字列でない場合に連結する
  export PATH="${PATH:+${PATH}:}$FZF_HOME/bin"
fi
# Auto-completion（インタラクティブモードのみ）
[[ $- == *i* ]] && source "$FZF_HOME/shell/completion.zsh" 2> /dev/null
# Key bindings
source "$FZF_HOME/shell/key-bindings.zsh"

# ripgrepはデフォルトで.gitignoreを考慮することに注意！
export FZF_DEFAULT_COMMAND='rg --files --hidden --glob "!.git"'
export FZF_DEFAULT_OPTS='--height 40% --reverse --border'
export FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
# export FZF_CTRL_T_OPTS='--preview "bat  --color=always --style=header,grid --line-range :100 {} || cat {}"'
export FZF_CTRL_T_OPTS=''

# nvim
function nvim_open() {
    local selected
    selected=$(fzf --multi --prompt="files> ")
    if [[ -n "$selected" ]]; then
        nvim $(echo $selected | xargs)
    fi
}
bindkey -s '^v' 'nvim_open\n'

alias t='tmux-session-fzf.sh'

# zsh; needs setopt re_match_pcre. You can, of course, adapt it to your own shell easily.
tmuxkillf () {
    local sessions
    sessions="$(tmux ls -F '#{session_name}' | fzf --exit-0 --multi --prompt='kill tmux sessions> ')"  || return $?
    local i
    for i in "${(f@)sessions}"
    do
        [[ $i =~ '([^:]*):.*' ]] && {
            echo "Killing $match[1]"
            tmux kill-session -t "$match[1]"
        }
    done
}
zle -N tmuxkillf
bindkey '^k' tmuxkillf

function ghq-fzf() {
  # bat > catの優先度で使う
  # ref: https://wonderwall.hatenablog.com/entry/2017/10/06/063000
  local batcom="bat --color=always --style=header,grid --line-range :80 $(ghq root)/{}/README.*"
  local defaultcom="cat $(ghq root)/{}/README.*"
  local src=$(
    ghq list | fzf --preview "(${batcom} || ${defaultcom}) 2> /dev/null | head -500" --prompt="ghq list> "
  )
  if [ -n "$src" ]; then
    BUFFER="cd $(ghq root)/$src"
    zle accept-line
  fi
  zle -R -c
}
zle -N ghq-fzf
bindkey '^]' ghq-fzf

# GIT heart FZF
# https://gist.github.com/junegunn/8b572b8d4b5eddd8b85e5f4d40f17236
# -------------

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% --min-height 20 --border --bind=ctrl-/:toggle-preview,ctrl-u:preview-page-up,ctrl-d:preview-page-down "$@"
}

# git status list -> file or directory
_gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --prompt="file> " \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

# branch list -> branch
_gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
  --prompt="branch> " \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

# tag list -> tag
_gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --prompt="tag> " \
    --preview 'git show --color=always {}'
}

# git log -> commit hash
_gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --prompt="hash> " \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
  grep -o "[a-f0-9]\{7,\}"
}

# git remote -v -> remote repository
_gv() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --prompt="remote repository> " \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
  cut -d$'\t' -f1
}

# stash list -> stash number
_gs() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' --prompt="stash> " |
  cut -d: -f1
}

join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

# original: unique mru checkouted branchs or commit hashs -> branch name or commit hash
_gm() {
    is_in_git_repo || return
    git --no-pager reflog | awk '$3 == "checkout:" && /moving from/ {print $8}' | uniq | \
        awk '
          BEGIN { memo[0]=""; results[0]=""; } { if(!($0 in memo))
          { memo[$0] = 1; results[length(results)] = $0; } }
          END { for(i=1; i<length(results); i++) print results[i] }
        ' | \
    fzf-down -m --preview 'git show --color=always {1}' --prompt="branch> "
}

# original: reflogs -> commit hash
_gr() {
    is_in_git_repo || return
    git --no-pager reflog | \
        fzf-down --preview 'git show --color=always {1}' --prompt="ref> " | \
        cut -d' ' -f1
}

# 2個目のキーはctrlなしでも発動するようにする
bind-git-helper() {
  local c
  for c in $@; do
    eval "fzf-g$c-widget() { local result=\$(_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
    eval "zle -N fzf-g$c-widget"
    eval "bindkey '^g^$c' fzf-g$c-widget"
    eval "bindkey '^g$c' fzf-g$c-widget"
  done
}
bind-git-helper f b t r h s m v
unset -f bind-git-helper
