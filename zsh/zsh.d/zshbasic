if command -v nvim &>/dev/null; then
    export EDITOR="nvim -u $XDG_CONFIG_HOME/nvim/minimal.init.vim"
else
    export EDITOR="vim"
fi

export MANPAGER="nvim -c ASMANPAGER -u $XDG_CONFIG_HOME/nvim/minimal.init.vim"

#############################
# key bindings
#############################
# vi mode
bindkey -v
bindkey -M viins 'jj' vi-cmd-mode
bindkey '^P' history-beginning-search-backward
bindkey '^N' history-beginning-search-forward
# バックスペースキーで文字を削除する
bindkey -v '^?' backward-delete-char
# Shift-Tabで候補を逆順に補完する
bindkey '^[[Z' reverse-menu-complete

# vifm
# tmux にまかせる
# vifm::here() {
#     tmux popup -w95% -h95% -E -d "#{pane_current_path}" vifm .
# }
# zle -N vifm::here
# bindkey '^f' vifm::here

function yazi-cd() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}
function yazi-cd-zle() {
    BUFFER="yazi-cd"
    zle accept-line  # Enter を送信
}
zle -N yazi-cd-zle
bindkey '^f' yazi-cd-zle

# lazygit
# tmux にまかせる
# lazygit::here() {
#     tmux popup -w95% -h95% -E -d "#{pane_current_path}" "lazygit"
# }
# zle -N lazygit::here
# bindkey '^gg' lazygit::here
# bindkey '^g^g' lazygit::here

# today zle
today-for-zle() {
    local result=$(date +%Y-%m-%d)
    zle reset-prompt
    LBUFFER+=$result
}
zle -N today-for-zle
bindkey '^aday' today-for-zle

# 標準出力・エラー両方をファイルにも出力する
std-out-and-err-to-file() {
    zle reset-prompt
    LBUFFER+="2>&1 | tee "
}
zle -N std-out-and-err-to-file
bindkey '^atee' std-out-and-err-to-file

# command line zle
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey "^o" edit-command-line

#############################
# setopt
#############################
# 入力したコマンドが存在せず、かつディレクトリ名と一致するなら、ディレクトリに cd する
# 例： /usr/bin と入力すると /usr/bin ディレクトリに移動
setopt auto_cd

# ↑を設定すると、 .. とだけ入力したら1つ上のディレクトリに移動できるので……
# 2つ上、3つ上にも移動できるようにする
alias ...='cd ../..'
alias ....='cd ../../..'

# cd した先のディレクトリをディレクトリスタックに追加する
# ディレクトリスタックとは今までに行ったディレクトリの履歴のこと
# `cd +<Tab>` でディレクトリの履歴が表示され、そこに移動できる
setopt auto_pushd
DIRSTACKSIZE=500
# pushd したとき、ディレクトリがすでにスタックに含まれていればスタックに追加しない
setopt pushd_ignore_dups

# 拡張 glob を有効にする
# glob とはパス名にマッチするワイルドカードパターンのこと
# （たとえば `mv hoge.* ~/dir` における "*"）
# 拡張 glob を有効にすると # ~ ^ もパターンとして扱われる
# どういう意味を持つかは `man zshexpn` の FILENAME GENERATION を参照
setopt extended_glob

# 入力したコマンドがすでにコマンド履歴に含まれる場合、履歴から古いほうのコマンドを削除する
setopt hist_ignore_all_dups

# コマンドがスペースで始まる場合、コマンド履歴に追加しない
# 例： <Space>echo hello と入力
setopt hist_ignore_space

# 単語の一部として扱われる文字のセットを指定する
# ここではデフォルトのセットから / を抜いたものとする
# こうすると、 Ctrl-W でカーソル前の1単語を削除したとき、 / までで削除が止まる
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# 補完候補を一覧で表示する
setopt auto_list

# 補完キー連打で候補順に自動で補完する
setopt auto_menu

# コマンド履歴に実行時間も記録する
setopt extended_history

# 直前と重複するコマンドを記録しない
setopt hist_ignore_dups

# コマンド中の余分なスペースは削除して履歴に記録する
setopt hist_reduce_blanks

# 履歴と重複するコマンドを記録しない
setopt hist_save_no_dups

# ^D でシェルを終了しない
setopt ignore_eof

# 履歴をすぐに追加する（通常はシェル終了時）
setopt inc_append_history

# '#' 以降をコメントとして扱う
setopt interactive_comments

# ビープを無効にする
setopt no_beep
setopt no_hist_beep
setopt no_list_beep

# = 以降も補完する（例：--option=value）
setopt magic_equal_subst

# バックグラウンド処理の状態変化をすぐに通知する
setopt notify

# 8bit文字を有効にする
setopt print_eight_bit

# 終了ステータスが0以外の場合にステータスを表示する
setopt print_exit_value

# VCS情報の表示を有効にする
setopt prompt_subst

# rm * の前に確認をとる
setopt rm_star_wait

# zsh間で履歴を共有する
setopt share_history

# コマンド実行後は右プロンプトを消す
setopt transient_rprompt

# URLをエスケープする
autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic

# 不要なコマンドをhistoryから除外する
zshaddhistory() {
    local line="${1%%$'\n'}"
    [[ ! "$line" =~ "^(cd|lazygit|ls|c|v|gc|gf|glo|gpoH|gpoh|gs|ta|tks)($| )" ]]
}

#############################
# zsh hook
#############################
autoload -Uz add-zsh-hook

#############################
# completion setting
#############################
# コマンドのオプションや引数を補完する
autoload -Uz compinit && compinit -u

# 補完の表示方法を変更する
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' use-cache true
zstyle ':completion:*' verbose yes
zstyle ':completion:*:default' menu select=2
zstyle ':completion:*:descriptions' format '%F{yellow}-- %d --%f'
zstyle ':completion:*:options' description 'yes'

# ---
# docker completion
# ---

fpath=(~/.zsh/completion $fpath)
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes

#############################
# prompt setting
#############################

autoload -Uz vcs_info

setopt prompt_subst
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
zstyle ':vcs_info:*' formats "%F{green}%c%u[%b]%f"
zstyle ':vcs_info:*' actionformats '[%b|%a]'

# ({upstream branchにのみ存在するコミット数}-{現在のbranchにのみ存在するコミット数})
function git_upstream_diff_num() {
    local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    if [ -n "$branch" ]; then
        local commits=$(git rev-list --count --left-right @{upstream}...HEAD 2> /dev/null)
        if [ -n "$commits" ]; then
            echo "(${commits//$'\t'/-})"
        else
            echo "(diff error)"
        fi
    fi
}

# 複数行のプロンプト
precmd () {
  # 1行あける
  print

  # カレントディレクトリ
  local left='%B%K{112}%{\e[38;5;18m%}  %~ %{\e[m%}%k%K{252}%F{112}%k%b'
  # バージョン管理されてた場合、ブランチ名
  vcs_info
  local diffnum='$(git_upstream_diff_num)'
  local right="%B%K{252}%{\e[38;5;32m%}  ${vcs_info_msg_0_} \
%{\e[38;5;18m%}${diffnum} \
%{\e[m%}\
%k%K{178}%F{252}%f%k%b%B%K{178}%{\e[38;5;18m%}  %DT%* %{\e[m%}%k%F{178}%f%b"
  # スペースの長さを計算
  # テキストを装飾する場合、エスケープシーケンスをカウントしないようにする
  local invisible='%([BSUbfksu]|([FK]|){*})'
  local leftwidth=${#${(S%%)left//$~invisible/}}
  local rightwidth=${#${(S%%)right//$~invisible/}}
  local padwidth=$(($COLUMNS - ($leftwidth + $rightwidth) % $COLUMNS))

  print -P $left$right
}

PROMPT='%{$fg[green]%}$%{$reset_color%} '
TRAPALRM() {
  zle reset-prompt
}

#############################
# cdr: https://wada811.blogspot.com/2014/09/zsh-cdr.html
#############################

# cdr, add-zsh-hook を有効にする
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs

# cdr の設定
zstyle ':completion:*' recent-dirs-insert both
zstyle ':chpwd:*' recent-dirs-max 500
zstyle ':chpwd:*' recent-dirs-default true
zstyle ':chpwd:*' recent-dirs-file "$XDG_CACHE_HOME/chpwd-recent-dirs"
zstyle ':chpwd:*' recent-dirs-pushd true

#############################
# environmental values
#############################
export LANG=ja_JP.UTF-8

# dotfiles
export DOTFILES_DIR=$HOME/dotfiles
path=(
    "$path[@]"
    "$DOTFILES_DIR/scripts"(N-/)
    "$HOME/mybin"(N-/)
)

# zsh
export KEYTIMEOUT=100
export HISTFILE=$XDG_STATE_HOME/zsh_history
export HISTSIZE=100000
export SAVEHIST=1000000
export CLICOLOR=true
export LSCOLORS='exfxcxdxbxGxDxabagacad'
export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=36;01:cd=33;01:su=31;40;07:sg=36;40;07:tw=32;40;07:ow=33;40;07:'

# tmux
path=(
    "$path[@]"
    "$XDG_CONFIG_HOME/tmux"(N-/)
)

# go
export GOPATH=$HOME/go
export GOBIN=$HOME/go/bin
export GO111MODULE=on
export GOCOMPE=$GOPATH/src/github.com/maguroguma/go-competitive
path=(
    "$path[@]"
    "$GOPATH/bin"(N-/)
    "/usr/local/opt/go/libexec/bin"(N-/)
    "/usr/local/go/bin"(N-/)
)

# openssl
path=(
    "/opt/homebrew/opt/openssl@3/bin"(N-/)
    "$path[@]"
)

# curl
path=(
    "/opt/homebrew/opt/curl/bin"(N-/)
    "$path[@]"
)

# yarn
path=(
    "$HOME/.yarn/bin"(N-/)
    "$HOME/.config/yarn/global/node_modules/.bin"(N-/)
    "$path[@]"
)

# deno
export DENO_INSTALL=$HOME/.deno
path=(
    "$DENO_INSTALL/bin"(N-/)
    "$path[@]"
)

# rust
path=(
    "$path[@]"
    "$HOME/.local/bin"(N-/)
)

#############################
# alias
#############################
# basic
if command -v nvim &>/dev/null; then
    alias v='nvim'
    alias vi='vim'
    alias vimdiff='nvim -d'
else
    echo "neovim is not executable."
fi
if command -v vim-startuptime &>/dev/null; then
    alias vst-main-100='vim-startuptime -count 100 -vimpath nvim'
    alias vst-mini-100='vim-startuptime -count 100 -vimpath nvim -- --cmd "source $XDG_CONFIG_HOME/nvim/minimal.init.vim"'
fi
alias rm='rm -i'
alias ..='cd ..'
alias mv='mv -i'
alias cp='cp -i'
alias c='clear'
alias lined_path="echo $PATH | tr ':' '\n'"
if [ -e "$HISTFILE" ]; then
    alias shell-history='cat $HISTFILE | cut -b 16- | head -n 5000'
fi
alias hw='hostname;whoami'
alias rgf='rg --files-with-matches'
alias gr='go run'
alias enja='trans en:ja'
alias jaen='trans ja:en'

# Git
# add
alias ga='git add'
alias gau='git add -u'
# checkout
alias gcho='git checkout'
# commit
alias gc='git commit'
alias gcm='git commit -m'
alias gcam='git commit --amend'
# diff
alias gd='git diff'
alias gds='git diff --staged'
# fetch
alias gf='git fetch'
alias gfp='git fetch --prune'
# log
alias glo='git log --oneline -n 30 --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --color=always --date=format:"%Y/%m/%d %H:%M:%S"'
# merge
alias gm='git merge'
# push
alias gp='git push'
alias gpoh='git push origin HEAD'
alias gpuoh='git push -u origin HEAD'
# reset
alias gu='git reset HEAD'
# status
alias gs='git status --short --untracked-files=all'
alias gS='git status --untracked-files=all'
# worktree
alias gwa='git worktree add'
alias gwl='git worktree list'
alias gwp='git worktree prune'

# composite command
alias gcommit-only-deleted='git ls-files --deleted | xargs git commit'

# Docker
alias docker-restart='docker-compose down && docker-compose build && docker-compose up -d'

# tmux
alias ta='tmux a'
alias tks='tmux kill-server'
alias tls='tmux ls'
alias tns='tmux new -s'
alias tn='tmux new -c $DOTFILES_DIR'
alias tcapture='tmux capture-pane -pS - > ./tmux-capture-pane-$(date +%Y%m%d-%H%M%S)'

# diff
alias diff-dir='diff -rq'
alias diff-unified='diff --unified'
alias diff-side-by-side='diff --side-by-side'

# tar
alias tar-comp='tar -zcf'
alias tar-decomp='tar -zxf'

# ubuntu
alias pbcopy='xsel --clipboard --input'
alias pbpaste='xsel --clipboard --output'
alias tmux-copy='tmux save-buffer - | pbcopy'

# brew
alias brew-deps-tree='brew deps --tree --installed'

# GNU系ツールに置き換える
case "$OSTYPE" in
    darwin*)
        (( ${+commands[gsed]} )) && alias sed='gsed'
        (( ${+commands[ggrep]} )) && alias grep='ggrep'
        (( ${+commands[gfind]} )) && alias find='gfind'
        (( ${+commands[gxargs]} )) && alias xargs='gxargs'
    ;;
esac

# gtrash
if command -v gtrash &>/dev/null; then
    alias tp='gtrash put' # trash put
else
    echo "gtrash is not executable."
fi

# go updater
# update_go() {
#   echo Looking up latest version
#   local path=/download/src/to
#   local go_path=$path/go
#   local version=$(go version 2> /dev/null | sed -e "s/^.*\(go[0-9.]\+\).*/\1/g");
#   local latest_version=$(curl --silent https://go.dev/VERSION?m=text)
#   if [[ "$version" == "$latest_version" ]]; then
#     echo "Local go version $version is the most recent release"
#     return 0
#   fi
#   local archive_uri=https://go.dev/dl/$latest_version.linux-amd64.tar.gz
#   local archive=$path/$latest_version.tar.gz
#   curl -L $archive_uri > "$archive"
#   [[ -d "$go_path" ]] && rm -rf $go_path
#   mkdir -p $go_path
#   tar -C $path -xzf $archive && rm $archive
# }

git-grep-history() {
  if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    echo "使用法: git-grep-history \"<検索したい文字列>\" [\"<ファイルパターン>\"]"
    return 1
  fi

  local search_string="$1"

  if [ "$#" -eq 2 ]; then
    local file_pattern="$2"
    git --no-pager grep "$search_string" $(git rev-list --all) -- $file_pattern
  else
    git --no-pager grep "$search_string" $(git rev-list --all)
  fi
}

# marp function
if command -v marp &>/dev/null; then
    marp-pdf() {
      if [ "$#" -ne 1 ]; then
        echo "使用法: marp-pdf <markdown_file>"
        echo "例: marp-pdf presentation.md"
        return 1
      fi

      local md_file="$1"

      # ファイルが存在するかチェック
      if [ ! -f "$md_file" ]; then
        echo "エラー: ${md_file} が見つかりません"
        return 1
      fi

      # 拡張子が.mdかチェック
      if [[ "$md_file" != *.md ]]; then
        echo "エラー: ${md_file} はマークダウンファイルではありません（.md拡張子が必要）"
        return 1
      fi

      # 拡張子を除いたベース名を取得
      local basename="${md_file%.md}"
      local pdf_file="${basename}.pdf"

      echo "PDF を生成します: ${md_file} -> ${pdf_file}"
      marp "$md_file" -o "$pdf_file"

      if [ $? -eq 0 ]; then
        echo "PDF生成完了: ${pdf_file}"
      else
        echo "エラー: PDF生成に失敗しました"
        return 1
      fi
    }

    alias marp-watch='marp -w'
fi

# claude code shortcut
if command -v claude &>/dev/null; then
    alias clp='claude -p'
fi

echo "\e[33m[$(basename $0)]\e[0m\t\e[32mloaded\e[0m"
