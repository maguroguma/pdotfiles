{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"check map key": {
		"prefix": "map key is exist",
		"body": [
			"if ${1:value}, ok := ${2:#:mapName}[${3:#:key}]; ok {",
			"\t${0:#:code-block}",
			"}"
		],
		"description": "Check the map key is exist"
	},

	"shakutori method": {
		"prefix": "shakutori method",
		"body": [
			"right := 0",
			"for left := 0; left < n; left++ {",
			"\tfor right < n && (${1:rightを1個前進させるにあたって条件を満たすかどうか}) {",
			"\t\t${2:sum += A[right]}",
			"\t\tright++",
			"\t}",
			"",
			"\t${3:ans += (right - left)}",
			"",
			"\tif right == left {",
			"\t\tright++",
			"\t} else {",
			"\t\t${4:sum -= A[left]}",
			"\t}",
			"}",
		],
		"description": "Measuring Worm method template"
	},

	"sort asc integer slice": {
		"prefix": "sort ASC integer slice",
		"body": [
			"sort.Sort(sort.IntSlice(${1:A})"
		],
		"description": "Sort integer slice ascending order"
	},

	"sort desc integer slice": {
		"prefix": "sort DESC integer slice",
		"body": [
			"sort.Sort(sort.Reverse(sort.IntSlice(${1:A})))"
		],
		"description": "Sort integer slice descending order"
	},

	"sort asc lexical order string slice": {
		"prefix": "sort ASC string slice",
		"body": [
			"sort.Sort(sort.StringSlice(${1:S}))"
		],
		"description": "Sort string slice lexical ascending order"
	},

	"sort desc lexical order string slice": {
		"prefix": "sort DESC string slice",
		"body": [
			"sort.Sort(sort.Reverse(sort.StringSlice(${1:S})))"
		],
		"description": "Sort string slice lexical descending order"
	},

	"copy slice": {
		"prefix": "copy slice",
		"body": [
			"${1:#:newSlice} := make([]${2:#:typeName(int)}, len(${3:#:originSlice}))",
			"copy($1, $3)"
		],
		"description": "copy origin slice to new slice"
	},

	"binary integer string": {
		"prefix": "binary integer string",
		"body": [
			"${1:#:binStr} := fmt.Sprintf(\"%b\", ${2:#:a})"
		],
		"description": "binary expression of integer"
	},

	"enum": {
		"prefix": "enum type go",
		"body": [
			"type ${1:#:typeName} int",
			"",
			"const (",
			"\t${2:#:name1} $1 = iota",
			"\t${3:#:name2}",
			")"
		],
		"description": "declare enum type"
	},

	"meguru's binary search": {
		"prefix": "meguru's binary search",
		"body": [
			"ng, ok := -1, len(${1:#:SilceName})",
			"for int(math.Abs(float64(ok - ng))) > 1 {",
			"\tmid := (ok + ng) / 2",
			"\tif ${2:isOK}(mid) {",
			"\t\tok = mid",
			"\t} else {",
			"\t\tng = mid",
			"\t}",
			"}",
			"${3:boundaryIdx} := ok",
		],
	},

	"cumulative sum (simple)": {
		"prefix": "cumulative sum (simple)",
		"body": [
			"${1:sums} := make([]int, len(${2:#:A})+1)",
			"for i := 0; i < len($2); i++ {",
			"\t$1[i+1] = $1[i] + $2[i]",
			"}",
		]
	},

	"sort struct": {
		"prefix": "sorted struct",
		"body": [
			"type ${1:Item} struct {",
			"  key int",
			"  ${2:#:otherProperty and type}",
			"} ",
			"type $1List []*$1",
			"",
			"func (l $1List) Len() int {",
			"  return len(l)",
			"}",
			"func (l $1List) Swap(i, j int) {",
			"  l[i], l[j] = l[j], l[i]",
			"}",
			"func (l $1List) Less(i, j int) bool {",
			"  return l[i].key < l[j].key",
			"}",
			"// how to use",
			"// L := make($1List, 0, 100000+1)",
			"// L = append(L, &$1{key: intValue})",
			"// sort.Sort(L)               // ASC",
			"// sort.Sort(sort.Reverse(L)) // DESC",
		]
	},

	"priority queue (integer)": {
		"prefix": "priority queue (integer)",
		"body": [
			"type IntPQ []int",
			"",
			"func (pq IntPQ) Len() int           { return len(pq) }",
			"func (pq IntPQ) Less(i, j int) bool { return pq[i] < pq[j] } // <: ASC, >: DESC",
			"func (pq IntPQ) Swap(i, j int)      { pq[i], pq[j] = pq[j], pq[i] }",
			"func (pq *IntPQ) Push(x interface{}) {",
			"  *pq = append(*pq, x.(int))",
			"}",
			"func (pq *IntPQ) Pop() interface{} {",
			"  old := *pq",
			"  n := len(old)",
			"  x := old[n-1]",
			"  *pq = old[0 : n-1]",
			"  return x",
			"}",
			"",
			"// how to use",
			"// pq := &IntPQ{3, 6, 1, 2}",
			"// heap.Init(pq)",
			"// heap.Push(pq, intValue)",
			"// poppedVal := heap.Pop(pq).(int)",
		]
	},

	"priority queue (struct)": {
		"prefix": "priority queue (struct)",
		"body": [
			"type ${1:Item} struct {",
			"  priority int",
			"  ${2:#:otherProperty and type}",
			"}",
			"type $1PQ []*$1",
			"",
			"func (pq $1PQ) Len() int           { return len(pq) }",
			"func (pq $1PQ) Less(i, j int) bool { return pq[i].priority < pq[j].priority } // <: ASC, >: DESC",
			"func (pq $1PQ) Swap(i, j int) {",
			"  pq[i], pq[j] = pq[j], pq[i]",
			"}",
			"func (pq *$1PQ) Push(x interface{}) {",
			"  item := x.(*$1)",
			"  *pq = append(*pq, item)",
			"}",
			"func (pq *$1PQ) Pop() interface{} {",
			"  old := *pq",
			"  n := len(old)",
			"  item := old[n-1]",
			"  *pq = old[0 : n-1]",
			"  return item",
			"}",
			"",
			"// how to use",
			"// temp := make($1PQ, 0, 100000+1)",
			"// pq := &temp",
			"// heap.Init(pq)",
			"// heap.Push(pq, &$1{priority: intValue})",
			"// popped := heap.Pop(pq).(*$1)",
		]
	},

	"split string": {
		"prefix": "split string by delimiter",
		"body": [
			"${1:strSlice} := strings.Split(\"aaa,bbb,ccc\", \",\")",
		]
	},

	"permutation patterns": {
		"prefix": "permutation patterns",
		"body": [
			"// PermutationPatterns returns all patterns of nPk of elems([]${1:rune}).",
			"func PermutationPatterns(elems []$1, k int) [][]$1 {",
			"  newResi := make([]$1, len(elems))",
			"  copy(newResi, elems)",
			"",
			"  return permRec([]$1{}, newResi, k)",
			"}",
			"",
			"// DFS function for PermutationPatterns.",
			"func permRec(pattern, residual []$1, k int) [][]$1 {",
			"  if len(pattern) == k {",
			"    return [][]$1{pattern}",
			"  }",
			"",
			"  res := [][]$1{}",
			"  for i, e := range residual {",
			"    newPattern := make([]$1, len(pattern))",
			"    copy(newPattern, pattern)",
			"    newPattern = append(newPattern, e)",
			"",
			"    newResi := []$1{}",
			"    newResi = append(newResi, residual[:i]...)",
			"    newResi = append(newResi, residual[i+1:]...)",
			"",
			"    res = append(res, permRec(newPattern, newResi, k)...)",
			"  }",
			"",
			"  return res",
			"}",
		]
	},

	"combination patterns": {
		"prefix": "combination patterns",
		"body": [
			"// CombinationPatterns returns all patterns of nCk of elems([]${1:rune}).",
			"func CombinationPatterns(elems []$1, k int) [][]$1 {",
			"  newResi := make([]$1, len(elems))",
			"  copy(newResi, elems)",
			"",
			"  return combRec([]$1{}, newResi, k)",
			"}",
			"",
			"// DFS function for CombinationPatterns.",
			"func combRec(pattern, residual []$1, k int) [][]$1 {",
			"  if len(pattern) == k {",
			"    return [][]$1{pattern}",
			"  }",
			"",
			"  res := [][]$1{}",
			"  for i, e := range residual {",
			"    newPattern := make([]$1, len(pattern))",
			"    copy(newPattern, pattern)",
			"    newPattern = append(newPattern, e)",
			"",
			"    newResi := []$1{}",
			"    newResi = append(newResi, residual[i+1:]...)",
			"",
			"    res = append(res, combRec(newPattern, newResi, k)...)",
			"  }",
			"",
			"  return res",
			"}",
		]
	},

	"duplicate patterns": {
		"prefix": "duplicate patterns",
		"body": [
			"// DuplicatePatterns returns all patterns of n^k of elems([]${1:rune}).",
			"func DuplicatePatterns(elems []$1, k int) [][]$1 {",
			"  return dupliRec([]$1{}, elems, k)",
			"}",
			"",
			"// DFS function for DuplicatePatterns.",
			"func dupliRec(pattern, elems []$1, k int) [][]$1 {",
			"  if len(pattern) == k {",
			"    return [][]$1{pattern}",
			"  }",
			"",
			"  res := [][]$1{}",
			"  for _, e := range elems {",
			"    newPattern := make([]$1, len(pattern))",
			"    copy(newPattern, pattern)",
			"    newPattern = append(newPattern, e)",
			"",
			"    res = append(res, dupliRec(newPattern, elems, k)...)",
			"  }",
			"",
			"  return res",
			"}",
		]
	},

	"factorial patterns": {
		"prefix": "factorial patterns",
		"body": [
			"// FactorialPatterns returns all patterns of n! of elems([]${1:rune}).",
			"func FactorialPatterns(elems []$1) [][]$1 {",
			"  newResi := make([]$1, len(elems))",
			"  copy(newResi, elems)",
			"",
			"  return factRec([]$1{}, newResi)",
			"}",
			"",
			"// DFS function for FactorialPatterns.",
			"func factRec(pattern, residual []$1) [][]$1 {",
			"  if len(residual) == 0 {",
			"    return [][]$1{pattern}",
			"  }",
			"",
			"  res := [][]$1{}",
			"  for i, e := range residual {",
			"    newPattern := make([]$1, len(pattern))",
			"    copy(newPattern, pattern)",
			"    newPattern = append(newPattern, e)",
			"",
			"    newResi := []$1{}",
			"    newResi = append(newResi, residual[:i]...)",
			"    newResi = append(newResi, residual[i+1:]...)",
			"",
			"    res = append(res, factRec(newPattern, newResi)...)",
			"  }",
			"",
			"  return res",
			"}",
		]
	},

	"imos' method": {
		"prefix": "imos's method",
		"body": [
			"${1:memo} := make([]int, ${2:1000000+5})  // 十分な定義域分の区間を取る",
			"for i := 0; i < len(${3:S}); i++ {",
			"  // すべての起点・終点をマークする",
			"  memo[$3[i]]++",
			"  memo[${4:T}[i]]--",
			"}",
			"for i := 1; i < $2; i++ {",
			"  // 十分な定義域分の区間について更新を行う",
			"  memo[i] += memo[i-1]",
			"}",
		]
	},

	"union find tree": {
		"prefix": "union find tree",
		"body": [
			"// UnionFind provides disjoint set algorithm.",
			"// It accepts both 0-based and 1-based setting.",
			"type UnionFind struct {",
			"  parents []int",
			"}",
			"",
			"// NewUnionFind returns a pointer of a new instance of UnionFind.",
			"func NewUnionFind(n int) *UnionFind {",
			"  uf := new(UnionFind)",
			"  uf.parents = make([]int, n+1)",
			"",
			"  for i := 0; i <= n; i++ {",
			"    uf.parents[i] = -1",
			"  }",
			"",
			"  return uf",
			"}",
			"",
			"// Root method returns root node of an argument node.",
			"// Root method is a recursive function.",
			"func (uf *UnionFind) Root(x int) int {",
			"  if uf.parents[x] < 0 {",
			"    return x",
			"  }",
			"",
			"  // route compression",
			"  uf.parents[x] = uf.Root(uf.parents[x])",
			"  return uf.parents[x]",
			"}",
			"",
			"// Unite method merges a set including x and a set including y.",
			"func (uf *UnionFind) Unite(x, y int) bool {",
			"  xp := uf.Root(x)",
			"  yp := uf.Root(y)",
			"",
			"  if xp == yp {",
			"    return false",
			"  }",
			"",
			"  // merge: xp -> yp",
			"  // merge larger set to smaller set",
			"  if uf.CcSize(xp) > uf.CcSize(yp) {",
			"    xp, yp = yp, xp",
			"  }",
			"  // update set size",
			"  uf.parents[yp] += uf.parents[xp]",
			"  // finally, merge",
			"  uf.parents[xp] = yp",
			"",
			"  return true",
			"}",
			"",
			"// Same method returns whether x is in the set including y or not.",
			"func (uf *UnionFind) Same(x, y int) bool {",
			"  return uf.Root(x) == uf.Root(y)",
			"}",
			"",
			"// CcSize method returns the size of a set including an argument node.",
			"func (uf *UnionFind) CcSize(x int) int {",
			"  return -uf.parents[uf.Root(x)]",
			"}",
		]
	},

	"trial division": {
		"prefix": "trial division",
		"body": [
			"// TrialDivision returns the result of prime factorization of integer N.",
			"func TrialDivision(n int) map[int]int {",
			"  if n <= 1 {",
			"    panic(errors.New(\"[argument error]: TrialDivision only accepts a NATURAL number\"))",
			"  }",
			"",
			"  p := map[int]int{}",
			"  for i := 2; i*i <= n; i++ {",
			"    exp := 0",
			"    for n%i == 0 {",
			"      exp++",
			"      n /= i",
			"    }",
			"",
			"    if exp == 0 {",
			"      continue",
			"    }",
			"    p[i] = exp",
			"  }",
			"  if n > 1 {",
			"    p[n] = 1",
			"  }",
			"",
			"  return p",
			"}",
		]
	},

	"is prime number": {
		"prefix": "is prime number",
		"body": [
			"// IsPrime judges whether an argument integer is a prime number or not.",
			"func IsPrime(n int) bool {",
			"  if n == 1 {",
			"    return false",
			"  }",
			"",
			"  for i := 2; i*i <= n; i++ {",
			"    if n%i == 0 {",
			"      return false",
			"    }",
			"  }",
			"",
			"  return true",
			"}",
		]
	},

	"negative mod": {
		"prefix": "negative mod",
		"body": [
			"// NegativeMod can calculate a right residual whether value is positive or negative.",
			"func NegativeMod(val, m int) int {",
			"  res := val % m",
			"  if res < 0 {",
			"    res += m",
			"  }",
			"  return res",
			"}",
		]
	},

	"mod inverse": {
		"prefix": "mod inverse",
		"body": [
			"// ModInv returns $a^{-1} mod m$ by Fermat's little theorem.",
			"// O(1), but C is nearly equal to 30 (when m is 1000000000+7).",
			"func ModInv(a, m int) int {",
			"  return modpow(a, m-2, m)",
			"}",
			"",
			"func modpow(a, e, m int) int {",
			"  if e == 0 {",
			"    return 1",
			"  }",
			"",
			"  if e%2 == 0 {",
			"    halfE := e / 2",
			"    half := modpow(a, halfE, m)",
			"    return half * half % m",
			"  }",
			"",
			"  return a * modpow(a, e-1, m) % m",
			"}",
		]
	},

	"grid BFS": {
		"prefix": "grid BFS",
		"body": [
			"queue := [][2]int{}",
			"steps := [4][2]int{",
			"  [2]int{0, 1}, [2]int{1, 0}, [2]int{0, -1}, [2]int{-1, 0},",
			"}",
			"for i := 0; i < ${1:h}; i++ {",
			"  for j := 0; j < ${2:w}; j++ {",
			"    if ${3:#:enqueue-condition} {",
			"      queue = append(queue, [2]int{i, j})",
			"    }",
			"  }",
			"}",
			"",
			"for len(queue) > 0 {",
			"  cc := queue[0]",
			"  queue = queue[1:]",
			"",
			"  cy, cx := cc[0], cc[1]",
			"  for _, step := range steps {",
			"    ny, nx := cy+step[0], cx+step[1]",
			"    if 0 <= ny && ny < $1 && 0 <= nx && nx < $2 && ${4:#:enqueue-condition} {",
			"      newCoord := [2]int{ny, nx}",
			"      queue = append(queue, newCoord)",
			"    }",
			"  }",
			"}",
		]
	}
}